/*
446. Arithmetic Slices II - Subsequence
Solved
Hard
Topics
Companies
Given an integer array nums, return the number of all the arithmetic subsequences of nums.

A sequence of numbers is called arithmetic if it consists of at least three elements and if the difference between any two consecutive elements is the same.

For example, [1, 3, 5, 7, 9], [7, 7, 7, 7], and [3, -1, -5, -9] are arithmetic sequences.
For example, [1, 1, 2, 5, 7] is not an arithmetic sequence.
A subsequence of an array is a sequence that can be formed by removing some elements (possibly none) of the array.

For example, [2,5,10] is a subsequence of [1,2,1,2,4,1,5,10].
The test cases are generated so that the answer fits in 32-bit integer.

 

Example 1:

Input: nums = [2,4,6,8,10]
Output: 7
Explanation: All arithmetic subsequence slices are:
[2,4,6]
[4,6,8]
[6,8,10]
[2,4,6,8]
[4,6,8,10]
[2,4,6,8,10]
[2,6,10]
Example 2:

Input: nums = [7,7,7,7,7]
Output: 16
Explanation: Any subsequence of this array is arithmetic.
 

Constraints:

1  <= nums.length <= 1000
-231 <= nums[i] <= 231 - 1
*/

func numberOfArithmeticSlices(nums []int) int {
    // let dp[i]->map{diff->map{length->counter}}
    // for i+1, loop through all element before i+1, use diff(nums[i+1]-nums[i]) to look
    // into the maps of dp[i] and add # of arithmetic subsequence
    n := len(nums)
    dp := make([]map[int]map[int]int, n)
    for i := range dp {
        dp[i] = make(map[int]map[int]int)
    }

    var res int
    for i := 1; i < n; i++ {
        for j := 0; j < i; j++ {
            diff := nums[i] - nums[j]
            if _, ok := dp[i][diff]; !ok {
                dp[i][diff] = make(map[int]int)
            }
            dp[i][diff][2] += 1
            lm, ok := dp[j][diff]
            if !ok {
                continue
            }
            for l, count := range lm {
                dp[i][diff][l+1] += count
                if l>=2 {
                    res += count
                }
            }
        }
        //fmt.Println("res=%v", res)
        //fmt.Println("dp[%v]=%v", i, dp[i])
    }
    return res
}
